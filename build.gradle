plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	// ▼ 추가
	id 'jacoco'
	id "org.sonarqube" version "5.1.0.4882"
}

group = 'com.ccn.userapi'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.bucket4j:bucket4j-core:8.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}


tasks.named('test') {
	useJUnitPlatform()
}

// ▼ 추가: 테스트 후 커버리지 리포트(xml) 생성
jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true   // SonarQube가 이 XML을 읽습니다.
		html.required = true
		csv.required = false
	}
}

// ▼ 추가: SonarQube 속성
sonarqube {
	properties {
		property "sonar.projectKey", "userapi"
		property "sonar.projectName", "User API"
		property "sonar.sources", "src/main/java"
		property "sonar.tests", "src/test/java"
		property "sonar.java.binaries", "build/classes/java/main"
		property "sonar.junit.reportPaths", "build/test-results/test"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.java.source", "17"
		property "sonar.sourceEncoding", "UTF-8"
	}
}

test {
	testLogging {
		events "started", "passed", "skipped", "failed"
		showStandardStreams = true // System.out.println 같은 출력도 보여줌
		exceptionFormat = 'full'  // 예외 전체 출력
	}
}
